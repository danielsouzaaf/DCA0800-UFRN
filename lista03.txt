***************************************************************************************
*****Universidade Federal do Rio Grande do Norte   	      			      			  *
*****Alunos: Daniel Souza Affonso Ferreira e Nilo de Almeida Medeiros		      	  *
*****Matrícula: 20170048953 e 20170048891 		    			      				  *
*****Componente: DCA0800 - ALGORITMOS E LOGICA DE PROGRAMACAO 	                      *
*****Professor: Agostinho Brito			                                      		  *
*****Lista 03     					     			      							  * 

==========================================Questão 1==================================================================================
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main (void)
{
	//Calcular a soma dos 100 primeiros nº naturais.


	//soma dos n termos de uma pa
	int i = (1 + 100) * 100 / 2;
	printf("%d", i);

	return 0;
    
}

========================================Questão 2====================================================================================
#include <stdio.h>
#include <stdlib.h>

int main()
{
	//Imprimir os múltiplos de 7 menores que 200.


	int fator, produto;

	printf("os múltiplos de 7 menores que 200 são: ");

	for(fator=0;produto<200;fator=fator+1)
	{
    	produto=fator * 7;
   		if(produto<200)
   		{
   			printf("%i\t", produto);
		}
	}
	return 0;
}

========================================Questão 3====================================================================================
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main (void)
{
	//Calcular e imprimir os números divisíveis por 4 menores que 100.


	int i;
	printf("números divisíveis por 4 menores que 100: ");
	for (i = 4; i <= 100; i += 4)
	printf("%d ", i);

	return 0;
    
}

========================================Questão 4====================================================================================
#include <stdio.h>
#include <stdlib.h>

int main()
{
	//Calcular os divisores de um nº qualquer.


	int x, y;
	printf("digite um numero qualquer para descobrir seus divisores \n");
	scanf("%i", &x);

	for(y=1;y<=x;y=y+1)
	{

    		if(x%y==0)
		{
        	printf("%i\t", y);
    		}
	}

	return 0;
}
========================================Questão 5====================================================================================
#include <stdio.h>
#include <stdlib.h>
 
int fatorial(int x)
{
    int result;
    result = x;
    if (x > 1)
    {
 
        return result*fatorial(x-1);
    }
    else{
        return 1;
    }
}
 
int main()
{
	
	//Para calcular o fatorial de um número qualquer.


    int a, n;
    n = 0;
    printf("digite o número para calcular a fatorial: ");
    scanf("%d", &n);
    a = fatorial(n);
    printf("fatorial = %d\n", a);
    return 0;
}
========================================Questão 6====================================================================================
#include <stdio.h>
#include <stdlib.h>

 
int main()
{
	
	//Imprimir o menor inteiro positivo x cujo quadrado é superior a um valor L dado.


    int x, l;
    x = 1;
    l = 0;
    printf("digite o valor L: ");
    scanf("%d", &l);
    while(x * x < l)
    {
		x++;
	}
    printf("lado = %d\n", x);
    return 0;
}
========================================Questão 7====================================================================================
#include <stdio.h>
#include <stdlib.h>

void tabuada(int n)
{
	int i;
	printf("Imprimindo a tabuada do número %d\n", n);
	for (i = 1; i <= n; i++)
	{
		printf("%d X %d = %d\n", n, i, n * i);
	}
}

int main()
{
	
	//Imprimir a tabuada do número 4.

	tabuada(4);
    
    return 0;
}

========================================Questão 8====================================================================================
#include <stdio.h>
#include <stdlib.h>

void tabuada(int n)
{
	int i;
	printf("Imprimindo a tabuada do número %d\n", n);
	for (i = 1; i <= n; i++)
	{
		printf("%d X %d = %d\n", n, i, n * i);
	}
}

int main()
{
	
	//Imprimir a tabuada de qualquer número n.

	int n;
	n = 0;
	printf("digite o número que você deseja descobrir a tabuada: ");
	scanf("%d", &n);
	tabuada(n);
    
    return 0;
}
========================================Questão 9====================================================================================
#include <stdio.h>
#include <stdlib.h>

int main()
{
	
	//Calcular e mostrar a média aritmética dos números pares compreendidos entre 13 e 73.
	
	
	//Utilizando os conceitos de P.A., temos que a fórmula da soma dos termos de uma P.A. finita é dada pela fórmula: soma = (a1 + an) * n / 2.
	//Com isso, sabemos a soma de todos os termos e, mais à frente, dividimos pela quantidade de termos, que coincide a quantidade de termos da P.A.
	//Logo, não é necessário multiplicar a soma por n, visto que, mais à frente, n será associado com o seu inverso multiplicativo, tendo como resultado 1.
	int i = (14 + 72) / 2;
	
	printf("média aritmética: %d", i);
	    
    return 0;
}

========================================Questão 10===================================================================================
#include <stdio.h>
#include <stdlib.h>

void printArray(int x[], int length)
{
	int i;
	for (i = 0; i < length; i++)
	{
		printf("%d ", x[i]);
	}
	printf("\n Quantidade de elementos: %d \n", length);
}

int main()
{
	
	//Ler 10 valores, um de cada vez, e contar quantos deles estão no intervalo [10,50] e quantos deles estão fora deste intervalo, mostrando estas informações.


	
	int in[10], out[10], qtdDentro, qtdFora, i, aux;
	qtdDentro = qtdFora = 0;
	for (i=0;i<10;i++)
	{
		printf("digite o %d número: ", i + 1);
		scanf("%d", &aux);
		if (aux >= 10 && aux <= 50)
		{
			in[qtdDentro++] = aux;
		}
		else
		{
			out[qtdFora++] = aux;
		}
	}
	printf("números digitados dentro do intervalo: ");
	printArray(in, qtdDentro);
	printf("números digitados fora do intervalo: ");
	printArray(out, qtdFora);
	    
    return 0;
}
========================================Questão 11===================================================================================
#include <stdio.h>
#include <stdlib.h>

int main()
{
	//Ler um número e escreva se ele "é primo" ou "não é primo".
	

	int x, y;
	printf("escreva um numero qualquer natural maior que zero \n");
	scanf("%i", &x);

	y=1;
	do
	{

    		y=y+1;

    	}while(x%y!=0);

	if(x==y)
	{
		printf("o numero eh primo");
	}
	else
	{
		printf("o numero nao eh primo");
	}
	return 0;
}

========================================Questão 12===================================================================================
#include <stdio.h>
#include <stdlib.h>


int checkPrime(int n)
{
	int i;
	if (n <= 1) return 0;
	//otimização do código seguindo o clivo de Eratóstenes.
	for (i = 2; i*i <= n; i++)
	{
		if (n % i == 0) return 0;
	}
	return 1;
}

int main (void)
{
	
	//Calcular a diferença entre o 6o e o 12o números Primos.


	int seisprimo, i, atualprimo;
	i = 2;
	atualprimo = 0;
	seisprimo = 0;
	while (atualprimo < 12)
	{
		if (checkPrime(i) == 1)
		{
			if (++atualprimo == 6)
			{
				seisprimo = i;
			}
		}
		if(atualprimo < 12) i++;
	}
	printf("diferença entre o 12primo e o 6primo = %d - %d = %d", i, seisprimo, i - seisprimo);
		

	return 0;
    
}

========================================Questão 13===================================================================================
#include <stdio.h>
#include <stdlib.h>

int sumFibo(int n)
{
	int a, b, c, soma, i;
	a = 0;
	b = 1;
	c = 1;
	soma = c;
	for (i = 2; i < n; i++)
	{
		c = a + b;
		a = b;
		b = c;
		soma += b;
	}
	
	return soma;
	
}

int main (void)
{
	//A série de Fibonacci é uma sequência de termos que tem como os 2 primeiros termos, respectivamente, os números 0 e 1. A partir daí, os demais termos são //formados seguindo uma certa regra. A série de Fibonacci pode ser vista a seguir:

	//0  1  1  2  3  5  8  13  21...
	//Descubra a regra que gera a seqüência da série de Fibonacci e escreva um algoritmo que gere os n (solicitados pelo usuário) primeiros termos desta série //e calcula e escreve a soma destes termos.

	int n;
	printf("digite a quantidade de termos: ");
	scanf("%d", &n);
	
	printf("soma dos %d primeiros termos: %d", n, sumFibo(n));
	
	return 0;
    
}

========================================Questão 14===================================================================================
#include <stdio.h>
#include <stdlib.h>
//Função para achar o primeiro número que satisfaz a condição. Daí para frente, sempre que eu acrescentar 11 no numerador, a divisão terá resto 5.
int findFirst(int start)
{
	int number = start;
	while (number % 11 != 5)
	{
		number++;
	}
	
	return number; 
}

int main (void)
{
	//Gerar 20 números entre 1000 a 1999 que divididos por 11 dão um resto igual a 5.


	int quantity, first, start;
	start = 1000;
	first = findFirst(start);
	quantity = 1;
	printf("números que satisfazem a condição: %d ", first);
	do {
		printf("%d ", first + 11 * quantity);
		++quantity;
		//Sair do laço caso atinja a quantidade pedida pela questão
		if (quantity == 20)
		{
			break;
		}
	}
	while (first + 11 * quantity < 2000);
	//Para o caso de não conseguir achar a quantidade de divisores que a questão pede.
	if (quantity < 20)
	{
		printf("\n Infelizmente, dentro do intervalo, só é possível gerar %d números que tem resto 5 quando divididos por 11!", quantity);
	}
	
	return 0;
    
}


========================================Questão 15===================================================================================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int countOcurrences(char needle, char haystack[])
{
	int i, quantity;
	quantity = 0;
	for (i = 0; i < strlen(haystack); i++)
	{
		if (haystack[i] == needle)
		{
			quantity++;
		}
	}
	
	return quantity;
}

int main (void)
{
	//Contar quantos caracteres 'a' existem em um texto fornecido pelo usuário. Assuma que o usuário não excederá o limite máximo de 100 caracteres.


	char texto[100];
	int quantity;
	printf("digite o texto: ");
	fgets(texto, 100, stdin);
	
	quantity = countOcurrences('a', texto);
	
	printf("quantidade de a: %d", quantity);
	
	return 0;
    
}

========================================Questão 16===================================================================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void reverse(char text[])
{
	int i;
	
	char aux;
	
	for (i = strlen(text) - 1; i > (strlen(text) - 1) / 2; i--)
	{
		aux = text[i];
		text[i] = text[strlen(text) - i - 1];
		text[strlen(text) - i - 1] = aux;
	}
	
}

int main (void)
{
	//Escrever ao contrário um texto que o usuário forneca. Ex:

	//Entrada
	//O rato roeu a roupa do rei
	//Saída
	//ier od apuor a ueor otar O


	char texto[100];
	
	printf("digite o texto: ");
	fgets(texto, 100, stdin);
	
	reverse(texto);
	puts(texto);
	
	return 0;
    
}



========================================Questão 17===================================================================================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

double celsiusToFahrenheit(double celsius)
{
	return celsius*1.8 + 32; 
}


int main (void)
{
	//Crie uma função para converter de Celsius para Farenheit


	double celsius, fahrenheit;
	celsius = 0;
	fahrenheit = 0;
	
	printf("digite a temperatura em celsius: ");
	scanf("%lf", &celsius);
	
	fahrenheit = celsiusToFahrenheit(celsius);
	printf("fahrenheit = %.1lf", fahrenheit);
	
	return 0;
    
}

========================================Questão 18===================================================================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

double fahrenheitToCelsius(double fahrenheit)
{
	return (fahrenheit - 32 / 1.8);
}


int main (void)
{
	//Crie uma função para converter de Farenheit para Celsius


	double celsius, fahrenheit;
	celsius = 0;
	fahrenheit = 0;
	
	printf("digite a temperatura em fahrenheit: ");
	scanf("%lf", &fahrenheit);
	
	celsius = fahrenheitToCelsius(fahrenheit);
	printf("fahrenheit = %.1lf", celsius);
	
	return 0;
    
}

========================================Questão 19===================================================================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

int aleatorio(int inicio, int limite)
{
	srand(time(NULL));
	int u = (rand() % (limite - inicio)) + inicio;
	return u;
	
}


int main (void)
{
	//Crie uma função para gerar um número aleatório no intervalo fechado [A:B[A:B], sendo AA e BB passados como parâmetro para essa função. Ex:

	//int x;
	//x = aleatorio(30,50);
	

	int x;
	
	x = aleatorio(30, 60);
	
	printf("x = %d", x);
	
	return 0;
    
}

========================================Questão 20===================================================================================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void printFactors(int numero)
{
	int i = 2;
	int aux = numero;
	int isPrime = 0;
	printf("%d = ", numero);
	while(i * i <= numero + 1)
	{
		
		if (numero % i == 0)
		{
			numero = numero / i;
			isPrime = 1;
		}
		else
		{
			if (isPrime == 1)
			{
				printf("%d X ", i);
				isPrime = 0;
			}
			
			i++;

		}
	}
	
		
	if (isPrime == 1)
			{
				printf("%d X ", i);
				isPrime = 0;
			}
	if (aux == numero || numero != 1)
	{
		printf("%d", numero);
	}

}


int main (void)
{
	//Crie uma função para imprimir realizar a decomposição em fatores primos de um número inteiro fornecido e imprimir esses fatores. Ex: 1365 = 3 x 5 x 7 x 13

	
	printFactors(1365);
	
	return 0;
    
}

========================================Questão 21===================================================================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void printArrayTree(int array[], int length)
{
	int i, k;
	
	for (i = 0; i < length; i++)
	{
		for (k = 0; k < array[i]; k++)
		{
			printf("*");
		}
		printf("\n");
	}
}


int main (void)
{
	//Crie uma função que receba um array de inteiros e desenhe um gráfico vertical usando '*'. Cada linha do gráfico possui quantidade de asteriscos igual o valor numérico dos elementos do array. Ex: para o array formado pelos elementos {4,5,6,1,8}{4,5,6,1,8}, o gráfico seria da forma

	//****
	//*****
	//******
	//*
	//********

	
	int arr[4] = {10, 3, 7, 5};
	
	printArrayTree(arr, 4);
	
	return 0;
    
}

========================================Questão 22===================================================================================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>


void printArrayTree(int array[], int length)
{
	int maxLength = array[0];
	
	int i, k;
	
	for (i = 0; i < length; i++)
	{
		if (array[i] > maxLength)
		{
			maxLength = array[i];
		}
	}
	
	for (k = maxLength; k > 0; k--)
	{
	
		for (i = 0; i < length; i++)
		{
			if (array[i] >= k)
			{
				printf("*");
			}
			else
			{
				printf(" ");
			}
		}
		
		printf("\n"); 
	}
}


int main (void)
{
	//Refaça a questão anterior realizando agora o traçado do gráfico na horizontal. Ex: para o array formado pelos elementos {4,5,6,1,8}{4,5,6,1,8}, o gráfico seria da forma

	//    *
	//    *
	//  * *
	// ** *
	//*** *
	//*** *
	//*** *
	//*****
	

	int arr[5] = {4, 5, 6, 1, 8};
	
	printArrayTree(arr, 5);
	
	return 0;
    
}
========================================Questão 23===================================================================================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void countCharsAndWords(char text[])
{
	int i, invalidos, palavras, len;
	len = strlen(text);
	palavras = 0;
	invalidos = 0;
	
	printf("%s: %d \n", text, len);
	
	for(i = 0; i < len; ++i)
	{
		if(text[i] == ' ' || text[i] == '\n')
		{
			invalidos++;
			
			if(i > 0 && (text[i-1] != ' ' && text[i-1] != '\n'))
			{
			    palavras++;
			}
		}
	}
	
	printf("%d caracteres e %d palavras", len - invalidos, palavras);
	
}


int main (void)
{
	//Prepare um programa que leia uma frase do teclado e informe quantas caracteres e palavras foram digitadas. Ex:

	//Digite a frase: o rato roeu a   roupa
	//15 caracteres, 5 palavras
	
	char texto[200];
	
	printf("digite a frase: ");
	fgets(texto, 200, stdin);
	
	countCharsAndWords(texto);
		
	return 0;
    
}

========================================Questão 24===================================================================================

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void reverse(char text[])
{
	int i;
	
	char aux;
	
	for (i = strlen(text) - 1; i > (strlen(text) - 1) / 2; i--)
	{
		aux = text[i];
		text[i] = text[strlen(text) - i - 1];
		text[strlen(text) - i - 1] = aux;
	}
	
}

int main (void)
{
	//Prepare uma função que receba um literal em um array e o rearrange de trás para frente. Ex:

	//char nome[] = "francisco jose";
	//puts(nome); mostra "francisco jose"
	//reverse(nome);
	//puts(nome); mostra "esoj ocsicnarf"
	char texto[100];
	
	printf("digite o texto: ");
	fgets(texto, 100, stdin);
	
	reverse(texto);
	puts(texto);
	
	return 0;
    
}


========================================Questão 25===================================================================================
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void countOcurrences(char text[], int ocurrences[])
{
	int i;
	
	for (i = 0; i < strlen(text); i++)
	{
		if (text[i] >= 'a' && text[i] <= 'z')
		{
			//pela tabela ASCII 2, sabemos que o valor inicial do a, que é a primeira letra lowercase, é 97, logo,
			//para inserirmos no nosso array, atribuindo cada letra ao seu índice em ordem alfabética, ex: a = 0,
			//b = 1, c = 2, d = 3, e = 4 ... z = 25, podemos subtrair o código do meu caractere do código do carac
			//tere a, que, por exemplo, quando for a será 97 - 97 = 0, b será 98 - 97 = 1, e assim até chegar em z,
			//que será 122 - 97 = 25.
			++ocurrences[text[i] - 97];
		}
		else if (text[i] >= 'A' && text[i] <= 'Z')
		{
			//a parte de baixo segue a mesma lógica da de cima, contudo, os caracteres uppercase tem início, de acordo
			//com a tabela ASCII 2,na posição 65.
			++ocurrences[text[i] - 65];
		}
	}
}

void populateArray(int array[], int length)
{
	int i;
	
	for (i = 0; i < length; i++)
	{
		array[i] = 0;
	} 
}

void printArray(int array[], int length)
{
	int i;
	for (i = 0; i < length; i++)
	{
		printf("%d => %d\n", i, array[i]);
	}
}

int main (void)
{
	//Leia um texto que o usuário digitar no teclado. Em seguida, informe a contagem de ocorrências de cada um dos caracteres [a-z] digitados, não importando
	//se o usuário digitou letras minúsculas ou maiúsculas.
	

	char texto[200];
	int ocorrencias[26];
	printf("digite o texto que você deseja checar:");
	fgets(texto, 200, stdin);
	
	populateArray(ocorrencias, 26);
	countOcurrences(texto, ocorrencias);
	
	printf("contagem da quantidade de ocorrências de cada letra do alfabeto no texto: texto\n");
	
	printArray(ocorrencias, 26);
	
	
	return 0;
    
}


