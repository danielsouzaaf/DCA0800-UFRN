#include <stdio.h>
#include <stdlib.h>
#include <math.h>

float desvioPadrao(float x[], float media, int n)
{
	float desviopadrao;
	desviopadrao = 0.0;
	int j;
	for (j = 0; j < n; j++)
	{
		desviopadrao += pow(x[j] - media, 2);
	}
	return sqrt(desviopadrao / (n - 1));
}

int main (void)

===============================Calcular a média e o desvio padrão recebendo N entradas====================================================
{
	float x[100], media;
    int i, n;
    printf("digite a quantidade de elementos que você irá inserir: ");
    scanf("%d", &n);
    media = 0.0;
    i = 0;
    for (i = 0; i < n; i++)
    {
		printf("digite o %d elemento", i);
		scanf("%f", &x[i]);
		media += x[i];
	}
	media /= n;
	printf("A média é: %f e o desvio padrão é de: %0.1f", media, desvioPadrao(x, media, n));
	
    return 0;
    
}

==============Transpor uma matriz==========
#include <stdio.h>
#include <stdlib.h>
#include <math.h>

int main (void)
{
	
	float z[4][4];
	float w[4][4];
	int i, j;
	for(i = 0; i < 4; i++)
	{
		for(j = 0; j < 4; j++)
		{
			z[i][j] = rand()%10;
			printf("%f ", z[i][j]);
		}
		printf("\n");
	}
	printf("\n");
	
	for(i = 0; i < 4; i++)
	{
		for(j = 0; j < 4; j++)
		{
			w[j][i] = z[j][i];
			printf("%f ", w[j][i]);
		}
		printf("\n");
	}
	return 0;
    
}


===============================Reverse em um array (com a criação de uma função que copia um array para outro array de mesmo tamanho======

#include <stdio.h>
#include <stdlib.h>


void copyArray(int a[], int b[], int length)
{
	int i;
	for ( i = 0; i < length; i++)
	{
		b[i] = a[i];
	}
	
}

void reverse(int a[], int n, int index)
{
	int aux;
	aux = a[index];
	a[index] = a[n - 1 - index];
	a[n - 1 - index] = aux;
}

void printArray(int x[], int length)
{
	int i;
	for (i = 0; i < length; i++)
	{
		printf("%d ", x[i]);
	}
	printf("\n Quantidade de elementos: %d \n", length);
}

int main (void)
{

	int x[10] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
	int i;
	
	for (i = 0; i < 10 / 2; i++)
	{
		reverse(x, 10, i);
	}
	printArray(x, 10);		

	return 0;
    
}

===============================Calcular primos em um vetor utilizando o crivo de eratóstenes==============================================

#include <stdio.h>
#include <stdlib.h>

void eliminateMultiples(int array[], int factor, int length)
{
	
	int i;
	for (i = 2*factor - 1; i < length; i += factor)
	{
		array[i] = 0;
	}
}

void printArray(int array[], int start, int length)
{
	int i;
	printf("os números primos de %d a %d são: ", start, length);
	for (i = 0; i < length; i++)
	{
		if (array[i] != 0 && array[i] != 1)
		{
			printf("%d ", array[i]);
		}
	}
}

int main (void)
{
	int numbers[1000];
	int i;
	
	for (i = 0; i < 1000; i++)
	{
		numbers[i] = i + 1;
	}
	
	for (i = 0; i*i < 1000; i++)
	{
		if (numbers[i] != 0 && numbers[i] != 1)
		{
			eliminateMultiples(numbers, numbers[i], 1000);
		}
	}
	
	printArray(numbers, 1, 1000);
	
	
	return 0;
    
}



===============================Achar uma matriz pattern dentro de uma matriz maior========================================================

#include <stdio.h>
#include <stdlib.h>

/*void findPattern(int needle[3][3], int haystack[8][6], int result[8][6])
{
	int i, j;
	for (i = 1; i < 8; i+=2)
	{
		for (j=1; j< 6; j+=2)
		{
			if (haystack[i][j] == needle[1][1] 
			&& haystack[i][j-1] == needle[1][0] 
			&& haystack[i][j+1] == needle[1][j+1] 
			&& haystack[i+1][j] == needle[2][1] 
			&& haystack[i+1][j-1] == needle[2][0]
			&& haystack[i+1][j+1] == needle[2][2]
			&& haystack[i-1][j] == needle[0][1]
			&& haystack[i-1][j+1] == needle[0][2]
			&& haystack[i-1][j-1] == needle[0][0])
			{
				result[i][j] = 1;
			}
		}
	}
}*/

void findPattern(int needle[3][3], int haystack[8][6], int result[8][6],
				 int needleLines, int needleColumns, int haystackLines, 
				 int haystackColumns)
{
	int i, j, k, l;
	int isCorrespondence;
	isCorrespondence = 0;
	
	for (i = 0; i < haystackLines-2; i++)
	{
		for(j = 0; j < haystackColumns-2; j++)
		{
			isCorrespondence = 1;
			for (k = 0; k < needleLines && isCorrespondence == 1; k++)
			{
				for (l = 0; l < needleColumns && isCorrespondence == 1; l++)
				{
					if (haystack[i+k][j+l] != needle[k][l])
					{
						isCorrespondence = 0;
					}
				}
			}
			if (isCorrespondence == 1)
		{
			result[i+1][j+1] = 1;
		}
		}
		
	}
}

void printMatriz(int matriz[8][6])
{
	int i, j;
	for (i = 0; i < 8; i++)
	{
		for (j = 0; j < 6; j++)
		{
			printf("%d ", matriz[i][j]);
		}
		printf("\n");
	}
}

int main (void)
{
	int matrizmae[8][6] ={ {0,1,0,0,1,0},
		{0,0,0,1,1,1},
		{0,1,0,0,1,0},
		{1,1,1,0,0,0},
		{0,1,0,1,0,0},
		{0,0,1,1,1,0},
		{0,1,0,1,0,0},
		{0, 0, 0, 1, 0, 0}
		};
	int matrizfilha[3][3] = {{0,1,0},
		{1,1,1},
		{0,1,0}
		};
	int result[8][6];
	int i, j;
	
	for (i = 0; i < 8; i++)
	{
		for (j = 0; j < 6; j++)
		{
			result[i][j] = 0;
		}
	}
	
	findPattern(matrizfilha, matrizmae, result, 3, 3, 8, 6);
	
	printMatriz(result);
	
	return 0;
    
}




/*  0 1 0 0 1 0
 *  0 0 0 1 1 1
 *  0 1 0 0 1 0
 *  1 1 1 0 0 0
 *  0 1 0 1 0 0
 *  0 0 1 1 1 0
 *  0 1 0 1 0 0
 *  0 0 0 1 0 0
 * 
 * 	0 1 0
 * 	1 1 1
 * 	0 1 0
 * 
 *  0 0 0 0 0 0
 *  0 0 0 0 1 0
 *  0 0 0 0 0 0
 *  0 1 0 0 0 0
 *  0 0 0 0 0 0
 *  0 0 0 0 0 0
 *  0 0 0 1 0 0
 *  0 0 0 0 0 0
*/

